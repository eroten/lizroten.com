<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tidyverse | Liz Roten</title>
    <link>https://lizroten.com/tag/tidyverse/</link>
      <atom:link href="https://lizroten.com/tag/tidyverse/index.xml" rel="self" type="application/rss+xml" />
    <description>tidyverse</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><copyright>Â© Liz Roten 2023</copyright><lastBuildDate>Tue, 05 Jul 2022 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://lizroten.com/media/icon_hu9684a0c7728a1791553eb63a20e70951_11434_512x512_fill_lanczos_center_3.png</url>
      <title>tidyverse</title>
      <link>https://lizroten.com/tag/tidyverse/</link>
    </image>
    
    <item>
      <title>Color palette exploration</title>
      <link>https://lizroten.com/post/color-palette-exploration/</link>
      <pubDate>Tue, 05 Jul 2022 00:00:00 +0000</pubDate>
      <guid>https://lizroten.com/post/color-palette-exploration/</guid>
      <description>&lt;h2 id=&#34;color-palette&#34;&gt;Color palette&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;m having a moment with linen, so I decided to make my color palette for my rstudio conference talk match some of my favorite hues.&lt;/p&gt;
&lt;p&gt;Colors based on &lt;a href=&#34;https://github.com/EdwinTh/dutchmasters&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;{dutchmasters}&lt;/code&gt;&lt;/a&gt;, semi.joan&amp;rsquo;s &lt;a href=&#34;https://www.instagram.com/semi.joan/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;instagram&lt;/a&gt;, and Blackbird Fabrics collection of &lt;a href=&#34;https://www.blackbirdfabrics.com/en-us/collections/linen&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;linen&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;dutch_white &amp;lt;- dutchmasters$pearl_earring[&amp;quot;white(colar)&amp;quot;]

brick &amp;lt;- colorRampPalette(c(&amp;quot;#A65746&amp;quot;, dutch_white))

midnight &amp;lt;- colorRampPalette(c(&amp;quot;#5A6E73&amp;quot;, dutch_white))

clay &amp;lt;- colorRampPalette(c(&amp;quot;#59302D&amp;quot;, dutch_white))

taupe &amp;lt;- colorRampPalette(c(&amp;quot;#BFB3A4&amp;quot;, dutch_white))

acorn &amp;lt;- colorRampPalette(c(&amp;quot;#BF895A&amp;quot;, dutch_white))

seaweed &amp;lt;- colorRampPalette(c(&amp;quot;#262001&amp;quot;, dutch_white))

noil_black &amp;lt;- colorRampPalette(c(&amp;quot;#0D0D0D&amp;quot;, dutch_white))

white &amp;lt;- colorRampPalette(c(dutch_white, &amp;quot;#FFFFFF&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Function to create palette ramp with a set number of levels.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;create_palette_ramp &amp;lt;- function(x = 50) {
  tibble::tibble(
    family = c(
      rep(&amp;quot;brick&amp;quot;, x),
      rep(&amp;quot;midnight&amp;quot;, x),
      rep(&amp;quot;clay&amp;quot;, x),
      rep(&amp;quot;taupe&amp;quot;, x),
      rep(&amp;quot;acorn&amp;quot;, x),
      rep(&amp;quot;noil_black&amp;quot;, x),
      rep(&amp;quot;white&amp;quot;, x),
      rep(&amp;quot;seaweed&amp;quot;, x)
    ),
    level = c(rep(1:x, 8)),
    code = c(
      brick(x),
      midnight(x),
      clay(x),
      taupe(x),
      acorn(x),
      noil_black(x),
      white(x),
      seaweed(x)
    )
  ) %&amp;gt;%
    dplyr::arrange(-level)
}

palette_ramp50 &amp;lt;- create_palette_ramp()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(
  palette_ramp50,
  aes(
    x = level,
    y = family,
    color = code
  )
) +
  geom_point(
    size = 25.4,
    shape = 15
  ) +
  scale_color_identity() +
  scale_y_discrete(limits = rev) +
  labs(
    title = &amp;quot;Color palette&amp;quot;,
    caption = my_caption
  ) +
  theme_minimal() +
  theme(
    axis.title = element_blank(),
    axis.text.x = element_blank(),
    axis.text.y = element_text(size = 40, hjust = 0),
    plot.title = element_text(size = 50),
    panel.grid = element_blank(),
    plot.caption = element_text(family = &amp;quot;Nunito&amp;quot;,
                                size = 25)
  )
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;https://lizroten.com/post/color-palette-exploration/index_files/figure-html/palette-display-1.png&#34; width=&#34;2100&#34; /&gt;
&lt;h2 id=&#34;gradient-bubbles&#34;&gt;Gradient bubbles&lt;/h2&gt;
&lt;p&gt;Notice &lt;code&gt;{purrr}&lt;/code&gt; use to generate a plot for each color all at once.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;set.seed(24601)

split_palette &amp;lt;- create_palette_ramp(200) %&amp;gt;%
  filter(family != &amp;quot;white&amp;quot;) %&amp;gt;%
  arrange(family, -level) %&amp;gt;%
  group_by(family) %&amp;gt;%
  group_split()


purrr::map(split_palette, function(x) {
  p &amp;lt;- ggplot(
    x,
    aes(
      x = family,
      y = level,
      color = code
    )
  ) +
    geom_jitter(
      size = 38,
      width = .55,
      height = 0,
      alpha = 0.90
    ) +
    scale_color_identity() +
    # scale_y_discrete(limits = rev) +
    coord_cartesian(
      clip = &amp;quot;off&amp;quot;,
      xlim = c(0.952, 1.058),
      ylim = c(-11.5, 208)
    ) +
    labs(caption = my_caption) +
    theme_minimal() +
    theme(
      axis.title = element_blank(),
      axis.text.x = element_blank(),
      panel.grid = element_blank(),
      axis.text.y = element_blank(),
      plot.caption = element_text(
        family = &amp;quot;Nunito&amp;quot;,
        size = 25,
        color = noil_black(1),
        vjust = -1,
        margin = margin(10, 0, 0, 0, &amp;quot;pt&amp;quot;)
      ),
      plot.caption.position = &amp;quot;plot&amp;quot;,
      plot.margin = margin(5, 5, 10, 5, &amp;quot;pt&amp;quot;),
      plot.background = element_rect(
        fill = dutch_white,
        colour = NA
      )
    )
})
## [[1]]
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;https://lizroten.com/post/color-palette-exploration/index_files/figure-html/single-gradients-1.png&#34; width=&#34;2100&#34; /&gt;
&lt;pre&gt;&lt;code&gt;## 
## [[2]]
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;https://lizroten.com/post/color-palette-exploration/index_files/figure-html/single-gradients-2.png&#34; width=&#34;2100&#34; /&gt;
&lt;pre&gt;&lt;code&gt;## 
## [[3]]
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;https://lizroten.com/post/color-palette-exploration/index_files/figure-html/single-gradients-3.png&#34; width=&#34;2100&#34; /&gt;
&lt;pre&gt;&lt;code&gt;## 
## [[4]]
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;https://lizroten.com/post/color-palette-exploration/index_files/figure-html/single-gradients-4.png&#34; width=&#34;2100&#34; /&gt;
&lt;pre&gt;&lt;code&gt;## 
## [[5]]
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;https://lizroten.com/post/color-palette-exploration/index_files/figure-html/single-gradients-5.png&#34; width=&#34;2100&#34; /&gt;
&lt;pre&gt;&lt;code&gt;## 
## [[6]]
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;https://lizroten.com/post/color-palette-exploration/index_files/figure-html/single-gradients-6.png&#34; width=&#34;2100&#34; /&gt;
&lt;pre&gt;&lt;code&gt;## 
## [[7]]
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;https://lizroten.com/post/color-palette-exploration/index_files/figure-html/single-gradients-7.png&#34; width=&#34;2100&#34; /&gt;
&lt;h2 id=&#34;gradient-bubbles-with-bars&#34;&gt;Gradient bubbles with bars&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;set.seed(24602)

split_palette_bubble &amp;lt;- create_palette_ramp(200) %&amp;gt;%
  filter(family != &amp;quot;white&amp;quot;) %&amp;gt;%
  arrange(family, -level) %&amp;gt;%
  group_by(family) %&amp;gt;%
  group_split()


purrr::map(split_palette_bubble, function(x) {
  max_level &amp;lt;- max(x$level)
  ggplot(
    x,
    aes(
      x = family,
      y = level,
      color = code
    )
  ) +
    geom_jitter(
      size = 25,
      width = 0.5,
      height = 0.2,
      alpha = 0.5
    ) +
    scale_color_identity() +
    geom_hline(
      yintercept = max_level * 0.55,
      color = x$code[max_level * 0.45],
      size = 8
    ) +
    geom_hline(
      yintercept = max_level * 0.5,
      color = x$code[max_level * 0.5],
      size = 10
    ) +
    geom_hline(
      yintercept = max_level * 0.45,
      color = x$code[max_level * 0.55],
      size = 8
    ) +
    coord_cartesian(
      clip = &amp;quot;off&amp;quot;,
      # xlim = c(-0.2, 0.2),
      ylim = c(-5, 205)
    ) +
    labs(caption = my_caption) +
    theme_minimal() +
    theme(
      axis.title = element_blank(),
      axis.text.x = element_blank(),
      panel.grid = element_blank(),
      axis.text.y = element_blank(),
      plot.background = element_rect(
        fill = x$code[max_level * 0.5],
        colour = NA
      ),
      plot.caption = element_text(
        family = &amp;quot;Nunito&amp;quot;, size = 25,
        color = ifelse(unique(x$family) %in% c(
          &amp;quot;acorn&amp;quot;,
          &amp;quot;taupe&amp;quot;
        ), &amp;quot;black&amp;quot;, &amp;quot;white&amp;quot;),
        vjust = -1,
        margin = margin(10, 0, 0, 0, &amp;quot;pt&amp;quot;)
      ),
      plot.caption.position = &amp;quot;plot&amp;quot;,
      plot.margin = margin(5, 5, 10, 5, &amp;quot;pt&amp;quot;)
    )
})
## [[1]]
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;https://lizroten.com/post/color-palette-exploration/index_files/figure-html/bubble-bar-gradients-1.png&#34; width=&#34;2100&#34; /&gt;
&lt;pre&gt;&lt;code&gt;## 
## [[2]]
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;https://lizroten.com/post/color-palette-exploration/index_files/figure-html/bubble-bar-gradients-2.png&#34; width=&#34;2100&#34; /&gt;
&lt;pre&gt;&lt;code&gt;## 
## [[3]]
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;https://lizroten.com/post/color-palette-exploration/index_files/figure-html/bubble-bar-gradients-3.png&#34; width=&#34;2100&#34; /&gt;
&lt;pre&gt;&lt;code&gt;## 
## [[4]]
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;https://lizroten.com/post/color-palette-exploration/index_files/figure-html/bubble-bar-gradients-4.png&#34; width=&#34;2100&#34; /&gt;
&lt;pre&gt;&lt;code&gt;## 
## [[5]]
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;https://lizroten.com/post/color-palette-exploration/index_files/figure-html/bubble-bar-gradients-5.png&#34; width=&#34;2100&#34; /&gt;
&lt;pre&gt;&lt;code&gt;## 
## [[6]]
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;https://lizroten.com/post/color-palette-exploration/index_files/figure-html/bubble-bar-gradients-6.png&#34; width=&#34;2100&#34; /&gt;
&lt;pre&gt;&lt;code&gt;## 
## [[7]]
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;https://lizroten.com/post/color-palette-exploration/index_files/figure-html/bubble-bar-gradients-7.png&#34; width=&#34;2100&#34; /&gt;
&lt;h2 id=&#34;diverging-bubbles&#34;&gt;Diverging bubbles&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;set.seed(24601)

select_pal &amp;lt;- create_palette_ramp(400) %&amp;gt;%
  filter(family %in% c(
    &amp;quot;brick&amp;quot;,
    &amp;quot;clay&amp;quot;,
    &amp;quot;acorn&amp;quot;
    # &amp;quot;taupe&amp;quot;
  )) %&amp;gt;%
  arrange(family, level)

p &amp;lt;- ggplot(
  select_pal,
  aes(
    y = family,
    x = level,
    color = code
  )
) +
  geom_jitter(
    size = 38,
    height = .45,
    width = 0,
    alpha = 0.90
  ) +
  scale_color_identity() +
  scale_y_discrete(limits = rev) +
  coord_cartesian(clip = &amp;quot;off&amp;quot;) +
  theme_minimal() +
  theme(
    axis.title = element_blank(),
    axis.text.x = element_blank(),
    panel.grid = element_blank(),
    axis.text.y = element_blank(),
    plot.background = element_rect(
      fill = dutch_white,
      colour = NA
    )
  )

p + (p + scale_x_reverse()) +
  labs(caption = my_caption) +
  theme(
    plot.caption = element_text(
      family = &amp;quot;Nunito&amp;quot;,
      size = 25,
      color = &amp;quot;black&amp;quot;,
      vjust = -1,
      margin = margin(15, 0, 0, 0, &amp;quot;pt&amp;quot;)
    ),
    plot.caption.position = &amp;quot;plot&amp;quot;,
    plot.margin = margin(5, 5, 10, 5, &amp;quot;pt&amp;quot;)
  )
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;https://lizroten.com/post/color-palette-exploration/index_files/figure-html/combined-gradient-1.png&#34; width=&#34;2100&#34; /&gt;
&lt;h2 id=&#34;watercolor-style-abstracts&#34;&gt;Watercolor-style abstracts&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;load(file = &amp;quot;data/seed_state.RData&amp;quot;)
wat &amp;lt;- canvas_watercolors(
  colors = c(
    acorn(1),
    brick(1),
    clay(1),
    acorn(1),
    brick(2),
    clay(3)
  ),
  background = dutch_white,
  layers = 20,
  resolution = 300,
  depth = 5
)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;wat +
  coord_cartesian(
    ylim = c(100, 200),
    xlim = c(75, 175)
  ) +
  labs(caption = my_caption) +
  theme(
    plot.caption = element_text(
      family = &amp;quot;Nunito&amp;quot;, size = 25,
      color = &amp;quot;black&amp;quot;,
      vjust = -1,
      margin = margin(0, 2, 0, 0, &amp;quot;pt&amp;quot;)
    ),
    plot.caption.position = &amp;quot;plot&amp;quot;,
    plot.margin = margin(0, 0, 8, 0, &amp;quot;pt&amp;quot;)
  )
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;https://lizroten.com/post/color-palette-exploration/index_files/figure-html/watercolor-plot-1.png&#34; width=&#34;2100&#34; /&gt;
</description>
    </item>
    
    <item>
      <title>Maps with {edgebundle}</title>
      <link>https://lizroten.com/post/maps-with-edgebundle/</link>
      <pubDate>Sat, 19 Dec 2020 00:00:00 +0000</pubDate>
      <guid>https://lizroten.com/post/maps-with-edgebundle/</guid>
      <description>&lt;h2 id=&#34;goal&#34;&gt;Goal&lt;/h2&gt;
&lt;p&gt;Use &lt;code&gt;{edgebundle}&lt;/code&gt; to map flight patterns over the US.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# remotes::install_github(&amp;quot;schochastics/edgebundle&amp;quot;)
library(edgebundle)
library(igraph)
library(ggplot2)
library(ggraph)
library(dplyr)
library(sf)
library(tigris)

set.seed(24601)

my_caption &amp;lt;- c(&amp;quot;Liz Roten (@LizRoten) | Data: openflights.org&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We also need to use the Python library, datashader. &lt;code&gt;{edgebundle}&lt;/code&gt; ships with a nice function for installing all the dependencies.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;edgebundle:::install_bundle_py()
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;data-prep&#34;&gt;Data prep&lt;/h2&gt;
&lt;p&gt;The data we will use is &lt;code&gt;us_flights&lt;/code&gt;, which is shipped with &lt;code&gt;{edgebundle}&lt;/code&gt;. &lt;code&gt;us_flights&lt;/code&gt; is a complex object.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;flights &amp;lt;- us_flights # name us_flights
coords &amp;lt;- cbind(V(flights)$longitude, V(flights)$latitude) # extract coordinates

# create vertex sequence
verts &amp;lt;- data.frame(x = V(flights)$longitude, y = V(flights)$latitude) 
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;supporting-data&#34;&gt;Supporting data&lt;/h3&gt;
&lt;p&gt;To make our output a little more aesthetically pleasing, we will go ahead and transform the data to use Albers Equal Area Conic.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;states &amp;lt;- tigris::states(cb = TRUE, progress_bar = FALSE) %&amp;gt;% 
  filter(STUSPS %in% state.abb,
         !NAME %in% c(&amp;quot;Alaska&amp;quot;,
                      &amp;quot;Hawaii&amp;quot;)) %&amp;gt;% 
  sf::st_transform(crs = &amp;quot; +proj=aea +lat_1=20 +lat_2=60 +lat_0=40 +lon_0=-96 +x_0=0 +y_0=0 +ellps=GRS80 +datum=NAD83 +units=m no_defs&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;coords_full &amp;lt;- cbind(V(flights)$longitude, V(flights)$latitude,  V(flights)$name) # extract coordinates


coords_sf &amp;lt;- st_as_sf(x = as.data.frame(coords_full), coords = c(&amp;quot;V1&amp;quot;, &amp;quot;V2&amp;quot;), crs = 4326) %&amp;gt;% 
  sf::st_transform(crs = &amp;quot; +proj=aea +lat_1=20 +lat_2=60 +lat_0=40 +lon_0=-96 +x_0=0 +y_0=0 +ellps=GRS80 +datum=NAD83 +units=m no_defs&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;edge-bundle&#34;&gt;Edge bundle&lt;/h2&gt;
&lt;p&gt;Create edge bundles&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;force_bundle &amp;lt;- edge_bundle_force(flights, xy = coords, compatibility_threshold = 0.6) 

force_bundle_sf &amp;lt;- force_bundle %&amp;gt;% 
  st_as_sf(coords = c(&amp;quot;x&amp;quot;, &amp;quot;y&amp;quot;), crs = 4326) %&amp;gt;% 
  sf::st_transform(crs = &amp;quot; +proj=aea +lat_1=20 +lat_2=60 +lat_0=40 +lon_0=-96 +x_0=0 +y_0=0 +ellps=GRS80 +datum=NAD83 +units=m no_defs&amp;quot;) %&amp;gt;% 
  rowwise() %&amp;gt;% 
  mutate(x_coord = st_coordinates(geometry)[[1]],
         y_coord = st_coordinates(geometry)[[2]])
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;create-map&#34;&gt;Create map&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;source(&amp;quot;theme.R&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;base_plot &amp;lt;- geom_sf(data = states,
          color = &amp;quot;white&amp;quot;,
          fill = NA,
          lwd = 0.1) 
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;final_map &amp;lt;- ggplot() +
  base_plot +
  geom_path(data = force_bundle_sf,
            aes(x = x_coord,
                y = y_coord,
                group = group),
            color = line_color,
            size = 0.5,
            alpha = 0.2) +
  geom_path(data = force_bundle_sf,
            aes(x = x_coord,
                y = y_coord,
                group = group),
            color = &amp;quot;white&amp;quot;,
            size = 0.005,
            alpha = 0.1) +
  geom_sf(data = coords_sf,
          color = line_color,
          size = 0.25) +
  geom_sf(data = coords_sf,
          color = &amp;quot;white&amp;quot;,
          size = 0.25,
          alpha = 0.1) +
  labs(title = &amp;quot;US Flight Network&amp;quot;,
       # subtitle = &amp;quot;Force Bundle Method&amp;quot;,
       caption = my_caption) +
  my_theme

final_map
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;https://lizroten.com/post/maps-with-edgebundle/index_files/figure-html/map_force_bundle-1.png&#34; width=&#34;672&#34; /&gt;
&lt;p&gt;To get the sizing just right on the final image I posted on Twitter, I adjusted the size of my viewing panel in RStudio until I was happy with the dimensions.&lt;/p&gt;
&lt;h2 id=&#34;credits&#34;&gt;Credits&lt;/h2&gt;
&lt;p&gt;This entire post was inspired by &lt;a href=&#34;https://twitter.com/dr_xeo&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Dominic RoyÃ©&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Trying a very nice new tool, thanks to {edgebundle} package created by &lt;a href=&#34;https://twitter.com/schochastics?ref_src=twsrc%5Etfw&#34;&gt;@schochastics&lt;/a&gt;. Here the European flight network in a bundle flow version. &lt;a href=&#34;https://twitter.com/hashtag/rstats?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#rstats&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/rspatial?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#rspatial&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/datavis?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#datavis&lt;/a&gt; &lt;a href=&#34;https://t.co/dty4tTSYdE&#34;&gt;pic.twitter.com/dty4tTSYdE&lt;/a&gt;&lt;/p&gt;&amp;mdash; Dr. Dominic RoyÃ© (@dr_xeo) &lt;a href=&#34;https://twitter.com/dr_xeo/status/1340299685421076485?ref_src=twsrc%5Etfw&#34;&gt;December 19, 2020&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;

&lt;p&gt;You can find my tweet with this map &lt;a href=&#34;https://twitter.com/LizRoten/status/1341075405269295109&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Finding the perfect sock pattern with {ravelRy}</title>
      <link>https://lizroten.com/post/finding-the-perfect-sock-pattern-with-ravelry/</link>
      <pubDate>Wed, 08 Apr 2020 00:00:00 +0000</pubDate>
      <guid>https://lizroten.com/post/finding-the-perfect-sock-pattern-with-ravelry/</guid>
      <description>&lt;p&gt;I am a knitter. Knitting is a calming, fulfilling practice that keep my hands busy and require &lt;em&gt;just&lt;/em&gt; enough brain power to keep my mind from wandering too far. Over the past winter, I conquered my fear of making socks, and now I profess that I am a sock knitter. I made socks for Christmas gifts, and churned out four pairs during my evenings, bus commutes, long work meetings, lectures, coffee and tea shop visits (basically everywhere). I&amp;rsquo;m comfortable with the standard stockinette sock, and I even ventured out into other patterns from Ravelry (&lt;em&gt;the&lt;/em&gt; social medium for yarn folks), like &lt;a href=&#34;https://www.ravelry.com/patterns/library/hermiones-everyday-socks&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Hermione&amp;rsquo;s Everyday Socks&lt;/a&gt; and the &lt;a href=&#34;https://www.ravelry.com/patterns/library/slip-it-simple-sock&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Slip It Simple Socks&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But, even as the weather is warming here in Minnesota, working from home means that I don&amp;rsquo;t have a commute and COVID-19 means that I have plenty of spare angst, so I&amp;rsquo;ve decided to make a new pair of socks, and work with a new pattern.&lt;/p&gt;
&lt;p&gt;And, just when I was starting to glaze over scrolling through endless Ravelry pages and reviews, I found &lt;a href=&#34;https://github.com/walkerkq/ravelRy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ravelRy&lt;/a&gt;, an R package that interfaces seamlessly with Ravelry&amp;rsquo;s &lt;a href=&#34;https://www.ravelry.com/api&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;API&lt;/a&gt;. And its even on CRAN!&lt;/p&gt;
&lt;p&gt;Lets install, and get going!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&amp;quot;ravelRy&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(ravelRy)
library(tidyverse)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;authentication&#34;&gt;Authentication&lt;/h2&gt;
&lt;p&gt;As with most APIs, you need to authenticate somehow. I&amp;rsquo;ll use my Ravelry account credentials (you&amp;rsquo;ll need a &lt;a href=&#34;https://www.ravelry.com/pro/developer&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;free, pro account&lt;/a&gt; to access the API).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ravelRy::ravelry_auth(key = &amp;quot;username&amp;quot;)
ravelRy::ravelry_auth(key = &amp;quot;password&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;search-for-a-sock-pattern&#34;&gt;Search for a sock pattern!&lt;/h2&gt;
&lt;p&gt;Lets start simple, and just look for the first 20 results for &amp;ldquo;sock&amp;rdquo; that are available as a Ravelry download.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;search_result &amp;lt;- search_patterns(
  query = &amp;quot;sock&amp;quot;,
  page_size = 20,
  craft = &amp;quot;knitting&amp;quot;, # knitting or crochet
  fit = &amp;quot;adult&amp;quot;, # adult, baby, etc.
  ravelry_download = TRUE
)

head(search_result)
#&amp;gt; # A tibble: 6 x 7
#&amp;gt;   free       id name         permalink designer.id designer.name pattern_sources
#&amp;gt;   &amp;lt;lgl&amp;gt;   &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;        &amp;lt;chr&amp;gt;           &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;         &amp;lt;list&amp;gt;         
#&amp;gt; 1 FALSE 1222621 Engelkrista~ engelkri~       34635 Caia Gossens  &amp;lt;df [2 x 60]&amp;gt;  
#&amp;gt; 2 TRUE  1250944 Vecna        vecna           97793 Dots Dabbles  &amp;lt;df [1 x 60]&amp;gt;  
#&amp;gt; 3 FALSE 1229788 Plaid Pocke~ plaid-po~      111830 Shuyi Wu      &amp;lt;df [2 x 60]&amp;gt;  
#&amp;gt; 4 TRUE  1235715 Cably Wably  cably-wa~       32564 Liz Sedmak    &amp;lt;df [2 x 60]&amp;gt;  
#&amp;gt; 5 FALSE 1091238 DRK Everyda~ drk-ever~       78156 Andrea Mowry  &amp;lt;df [1 x 60]&amp;gt;  
#&amp;gt; 6 TRUE  1244939 Sock Prince~ sock-pri~       92088 Annette Schl~ &amp;lt;df [1 x 60]&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The fourth result is even my old friend, &amp;ldquo;Hermione&amp;rsquo;s Everyday Socks!&amp;rdquo;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;search_result[4, ] # get the fourth row in the table
#&amp;gt; # A tibble: 1 x 7
#&amp;gt;   free       id name        permalink  designer.id designer.name pattern_sources
#&amp;gt;   &amp;lt;lgl&amp;gt;   &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;       &amp;lt;chr&amp;gt;            &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;         &amp;lt;list&amp;gt;         
#&amp;gt; 1 TRUE  1235715 Cably Wably cably-wab~       32564 Liz Sedmak    &amp;lt;df [2 x 60]&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lets take a look at the actual pattern from the search results using &lt;code&gt;get_patterns()&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;hermione &amp;lt;- get_patterns(ids = search_result[4, ]$id)
str(hermione, max.level = 2)
#&amp;gt; tibble [1 x 50] (S3: tbl_df/tbl/data.frame)
#&amp;gt;  $ comments_count         : int 4
#&amp;gt;  $ created_at             : chr &amp;quot;2022/04/19 09:02:36 -0400&amp;quot;
#&amp;gt;  $ currency               : chr &amp;quot;USD&amp;quot;
#&amp;gt;  $ difficulty_average     : num 6.36
#&amp;gt;  $ difficulty_count       : int 150
#&amp;gt;  $ downloadable           : logi FALSE
#&amp;gt;  $ favorites_count        : int 428
#&amp;gt;  $ free                   : logi TRUE
#&amp;gt;  $ gauge                  : num 8
#&amp;gt;  $ gauge_divisor          : int 1
#&amp;gt;  $ gauge_pattern          : chr &amp;quot;stockinette stitch&amp;quot;
#&amp;gt;  $ generally_available    : chr &amp;quot;2022/04/01 00:00:00 -0400&amp;quot;
#&amp;gt;  $ id                     : int 1235715
#&amp;gt;  $ name                   : chr &amp;quot;Cably Wably&amp;quot;
#&amp;gt;  $ pdf_url                : chr &amp;quot;&amp;quot;
#&amp;gt;  $ permalink              : chr &amp;quot;cably-wably&amp;quot;
#&amp;gt;  $ price                  : chr &amp;quot;&amp;quot;
#&amp;gt;  $ projects_count         : int 848
#&amp;gt;  $ published              : chr &amp;quot;2022/04/01&amp;quot;
#&amp;gt;  $ queued_projects_count  : int 55
#&amp;gt;  $ rating_average         : num 4.55
#&amp;gt;  $ rating_count           : int 152
#&amp;gt;  $ row_gauge              : num 11
#&amp;gt;  $ updated_at             : chr &amp;quot;2022/06/09 18:40:59 -0400&amp;quot;
#&amp;gt;  $ url                    : chr &amp;quot;&amp;quot;
#&amp;gt;  $ yardage                : int 350
#&amp;gt;  $ yardage_max            : int 500
#&amp;gt;  $ personal_attributes    : chr &amp;quot;&amp;quot;
#&amp;gt;  $ sizes_available        : chr &amp;quot;Small (8.5â, 21.5 cm) (Large (9.5â, 24 cm)) actual circumference&amp;quot;
#&amp;gt;  $ product_id             : chr &amp;quot;&amp;quot;
#&amp;gt;  $ currency_symbol        : chr &amp;quot;$&amp;quot;
#&amp;gt;  $ ravelry_download       : logi FALSE
#&amp;gt;  $ download_location      : chr &amp;quot;&amp;quot;
#&amp;gt;  $ pdf_in_library         : logi FALSE
#&amp;gt;  $ volumes_in_library     : chr &amp;quot;&amp;quot;
#&amp;gt;  $ gauge_description      : chr &amp;quot;8 stitches and 11 rows = 1 inch in stockinette stitch&amp;quot;
#&amp;gt;  $ yarn_weight_description: chr &amp;quot;Fingering (14 wpi)&amp;quot;
#&amp;gt;  $ yardage_description    : chr &amp;quot;350 - 500 yards&amp;quot;
#&amp;gt;  $ pattern_needle_sizes   :List of 1
#&amp;gt;  $ notes_html             : chr &amp;quot;\n&amp;lt;p&amp;gt;These socks were designed for Round 3 of the 2022 Sock Madness competition and will be exclusive to the pl&amp;quot;| __truncated__
#&amp;gt;  $ notes                  : chr &amp;quot;These socks were designed for Round 3 of the 2022 Sock Madness competition and will be exclusive to the players&amp;quot;| __truncated__
#&amp;gt;  $ packs                  :List of 1
#&amp;gt;  $ printings              :List of 1
#&amp;gt;  $ yarn_weight            :List of 1
#&amp;gt;  $ craft                  :List of 1
#&amp;gt;  $ pattern_categories     :List of 1
#&amp;gt;  $ pattern_attributes     :List of 1
#&amp;gt;  $ pattern_author         :List of 1
#&amp;gt;  $ photos                 :List of 1
#&amp;gt;  $ pattern_type           :List of 1
str(hermione$pattern_attributes)
#&amp;gt; List of 1
#&amp;gt;  $ : tibble [16 x 2] (S3: tbl_df/tbl/data.frame)
#&amp;gt;   ..$ id       : int [1:16] 3 10 12 18 22 25 56 64 204 207 ...
#&amp;gt;   ..$ permalink: chr [1:16] &amp;quot;unisex&amp;quot; &amp;quot;adult&amp;quot; &amp;quot;negative-ease&amp;quot; &amp;quot;fitted&amp;quot; ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I thought the Hermione sock was fairly straightforward. What is the average difficulty, on a scale of 1 to 10?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;hermione$difficulty_count # how many reviews rated a difficulty?
#&amp;gt; [1] 150
hermione$difficulty_average # what is the average difficulty?
#&amp;gt; [1] 6.36
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lets find my other sock pattern, Slip It Simple, and see what the difficulty rating is.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;slip_it_search &amp;lt;- search_patterns(query = &amp;quot;slip it simple sock&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, take the &lt;code&gt;id&lt;/code&gt; column and feed it into  &lt;code&gt;get_patterns()&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;slip_it &amp;lt;- get_patterns(ids = slip_it_search$id)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What is our difficulty?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;slip_it$difficulty_count
#&amp;gt; [1]  67 102
slip_it$difficulty_average
#&amp;gt; [1] 2.447761 2.166667
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are fewer reviews, but the difficulty is super low.&lt;/p&gt;
&lt;h2 id=&#34;refining-our-search&#34;&gt;Refining our search&lt;/h2&gt;
&lt;p&gt;We can use the pattern table for &lt;code&gt;hermione&lt;/code&gt; and &lt;code&gt;slip_it&lt;/code&gt; to narrow our search further.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;head(search_patterns(
  query = &amp;quot;sock&amp;quot;,
  page_size = 20,
  craft = &amp;quot;knitting&amp;quot;, # knitting or crochet
  fit = &amp;quot;adult&amp;quot;, # adult, baby, etc.
  ravelry_download = TRUE,
  pattern_needle_sizes = 1,
  weight = &amp;quot;fingering&amp;quot;, # yarn weight
  type = &amp;quot;sock&amp;quot;,
  colors = 1
))
...
#&amp;gt; # A tibble: 6 x 7
#&amp;gt;   free       id name         permalink designer.id designer.name pattern_sources
#&amp;gt;   &amp;lt;lgl&amp;gt;   &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;        &amp;lt;chr&amp;gt;           &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;         &amp;lt;list&amp;gt;         
#&amp;gt; 1 TRUE  1235715 Cably Wably  cably-wa~       32564 Liz Sedmak    &amp;lt;df [2 x 60]&amp;gt;  
#&amp;gt; 2 FALSE 1091238 DRK Everyda~ drk-ever~       78156 Andrea Mowry  &amp;lt;df [1 x 60]&amp;gt;  
#&amp;gt; 3 FALSE 1121082 Senbonzakura senbonza~       31024 Natalia Vasi~ &amp;lt;df [2 x 60]&amp;gt;  
#&amp;gt; 4 FALSE 1249732 Barleycorn   barleyco~      107022 Eva Romeijn   &amp;lt;df [1 x 60]&amp;gt;  
#&amp;gt; 5 TRUE   891114 Rye Light    rye-light       45502 tincanknits   &amp;lt;df [3 x 60]&amp;gt;  
...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Another trick is to go look at the URL when I am searching on Ravelry itself. This gives me an idea of what search terms I can add to &lt;code&gt;search_patterns()&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;refined_search &amp;lt;- search_patterns(
  query = &amp;quot;socks&amp;quot;,
  pc = &amp;quot;mid-calf&amp;quot;,
  page_size = 100,
  craft = &amp;quot;knitting&amp;quot;, # knitting or crochet
  # fit = &amp;quot;adult&amp;quot;, # adult, baby, etc.
  ravelry_download = TRUE,
  pattern_needle_sizes = 1,
  weight = &amp;quot;fingering&amp;quot;, # yarn weight
  type = &amp;quot;sock&amp;quot;,
  colors = 1,
  diff = &amp;quot;3.5%7C8&amp;quot;,
  language = &amp;quot;en&amp;quot;,
  sort = &amp;quot;projects&amp;quot;,
  photo = &amp;quot;yes&amp;quot;
)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;review-refined-search-results&#34;&gt;Review refined search results&lt;/h2&gt;
&lt;p&gt;Now that I&amp;rsquo;ve picked out 100 patterns to consider/make fun plots with, lets review them in more detail.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;refined_patterns &amp;lt;- get_patterns(ids = refined_search$id) # this might take a while
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To start plotting, I will import my theme and &lt;a href=&#34;https://github.com/EdwinTh/dutchmasters&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;{dutchmasters}&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;source(&amp;quot;my_sock_theme.R&amp;quot;)
library(dutchmasters)
ggplot() +
  geom_density(refined_patterns,
    mapping = aes(
      x = comments_count,
      fill = free
    ),
    alpha = 0.7,
    color = &amp;quot;gray&amp;quot;
  ) +
  dutchmasters::scale_fill_dutchmasters(palette = &amp;quot;pearl_earring&amp;quot;) +
  labs(
    title = &amp;quot;Pattern Comment Density&amp;quot;,
    x = &amp;quot;Comment count&amp;quot;,
    y = &amp;quot;Density&amp;quot;,
    caption = my_caption
  ) +
  my_theme()
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;https://lizroten.com/post/finding-the-perfect-sock-pattern-with-ravelry/index_files/figure-html/comment_density-1.png&#34; width=&#34;672&#34; /&gt;
&lt;p&gt;Next, we&amp;rsquo;ll make a density plot series comparing the average difficulty rating for each pattern attribute (check out &lt;a href=&#34;https://github.com/walkerkq/ravelRy/blob/master/man/example_files/example_eda.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;this example&lt;/a&gt; for this plot&amp;rsquo;s inspiration).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;pattern_details_attributes &amp;lt;- refined_patterns %&amp;gt;%
  unnest(cols = &amp;quot;pattern_attributes&amp;quot;, names_sep = &amp;quot;_&amp;quot;)


top_attributes &amp;lt;- pattern_details_attributes %&amp;gt;%
  filter(difficulty_count &amp;gt;= 20) %&amp;gt;%
  count(pattern_attributes_permalink) %&amp;gt;%
  filter(n &amp;gt;= 20)

attributes_long &amp;lt;- pattern_details_attributes %&amp;gt;%
  filter(pattern_attributes_permalink %in% top_attributes$pattern_attributes_permalink) %&amp;gt;%
  mutate(pattern_attributes_permalink = stringr::str_to_title(pattern_attributes_permalink)) %&amp;gt;% 
  select(id, pattern_attributes_permalink, difficulty_average, rating_average)

plot_diff_by_att &amp;lt;- attributes_long %&amp;gt;%
  ggplot() +
  geom_density(aes(x = difficulty_average),
    fill = dutchmasters::dutchmasters$pearl_earring[4],
    color = &amp;quot;gray&amp;quot;,
    outline.type = &amp;quot;full&amp;quot;
  ) +
  facet_grid(reorder(
    pattern_attributes_permalink,
    difficulty_average, median
  ) ~ .,
  switch = &amp;quot;y&amp;quot;, scales = &amp;quot;free_y&amp;quot;
  ) +
  scale_x_continuous(limits = c(2, 7)) +
  labs(
    title = &amp;quot;Average difficulty rating by pattern attribute&amp;quot;,
    # subtitle = &amp;quot;Sock knitting patterns&amp;quot;,
    y = &amp;quot;&amp;quot;, x = &amp;quot;Average difficulty&amp;quot;,
        caption = my_caption

  ) +
  my_theme() +
  theme(
    panel.spacing.y = unit(0, &amp;quot;lines&amp;quot;),
    panel.grid = element_blank(),
    panel.grid.major.y = element_blank(),
    strip.text.y.left = element_text(angle = 0),
    strip.background = element_rect(fill = NA, color = NA),
    axis.text.y = element_blank())

plot_diff_by_att
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;https://lizroten.com/post/finding-the-perfect-sock-pattern-with-ravelry/index_files/figure-html/plot_difficulty_by_attribute-1.png&#34; width=&#34;768&#34; /&gt;
&lt;h2 id=&#34;narrow-down-results&#34;&gt;Narrow down results&lt;/h2&gt;
&lt;p&gt;I want to use a pattern with high ratings and a high number of projects. What do these distributions look like?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(cowplot)

project_count &amp;lt;- ggplot(data = refined_patterns) +
  geom_density(
    mapping = aes(x = projects_count),
    fill = dutchmasters::dutchmasters$pearl_earring[2],
    alpha = 0.8,
    color = &amp;quot;gray&amp;quot;
  ) +
  scale_x_continuous(labels = scales::comma) +
  labs(
    title = &amp;quot;Project Count&amp;quot;,
    x = &amp;quot;Projects&amp;quot;,
    y = &amp;quot;&amp;quot;
  ) +
  my_theme()

rating_count &amp;lt;- ggplot(data = refined_patterns) +
  geom_density(
    mapping = aes(x = rating_count),
    fill = dutchmasters::dutchmasters$pearl_earring[3],
    alpha = 0.8,
    color = &amp;quot;gray&amp;quot;
  ) +
  scale_x_continuous(labels = scales::comma) +
  labs(
    title = &amp;quot;Rating Count&amp;quot;,
    x = &amp;quot;Ratings&amp;quot;,
    y = &amp;quot;&amp;quot;,
        caption = my_caption

  ) +
  my_theme()


cowplot::plot_grid(project_count, rating_count)
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;https://lizroten.com/post/finding-the-perfect-sock-pattern-with-ravelry/index_files/figure-html/unnamed-chunk-19-1.png&#34; width=&#34;672&#34; /&gt;
&lt;p&gt;It looks like there is a big drop-off around 1,000 project and 500 ratings.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;project_rating_patterns &amp;lt;- refined_patterns %&amp;gt;%
  filter(
    projects_count &amp;gt;= 1000,
    rating_count &amp;gt;= 500
  )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That &lt;code&gt;filter()&lt;/code&gt; took us from 100 patterns to 11. Progress!&lt;/p&gt;
&lt;p&gt;Now, lets look at the ratings and difficulty. We will also separate these out by availability.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(project_rating_patterns) +
  geom_point(
    mapping = aes(
      x = difficulty_average,
      y = rating_average,
      color = free
    ),
    size = 4
  ) +
  dutchmasters::scale_color_dutchmasters(palette = &amp;quot;pearl_earring&amp;quot;) +
  labs(
    title = &amp;quot;Average Rating and Average Difficulty&amp;quot;,
    x = &amp;quot;Average difficulty&amp;quot;,
    y = &amp;quot;Average Rating&amp;quot;,
    caption = my_caption
  ) +
  my_theme()
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;https://lizroten.com/post/finding-the-perfect-sock-pattern-with-ravelry/index_files/figure-html/average_rating_avg_difficulty-1.png&#34; width=&#34;672&#34; /&gt;
&lt;p&gt;Nothing too informative here. What are the top pattern attributes?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;project_rating_patterns %&amp;gt;%
  unnest(cols = &amp;quot;pattern_attributes&amp;quot;, names_sep = &amp;quot;_&amp;quot;) %&amp;gt;%
  count(pattern_attributes_permalink) %&amp;gt;%
  filter(n &amp;gt; 5) %&amp;gt;%
  arrange(desc(n)) %&amp;gt;%
  ggplot() +
  geom_col(aes(
    x = pattern_attributes_permalink,
    y = n
  ),
  fill = dutchmasters::dutchmasters$pearl_earring[9]
  ) +
  labs(
    title = &amp;quot;Top pattern attributes&amp;quot;,
    x = &amp;quot;Pattern attribute&amp;quot;,
    y = &amp;quot;&amp;quot;,
    caption = my_caption

  ) +
  my_theme()
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;https://lizroten.com/post/finding-the-perfect-sock-pattern-with-ravelry/index_files/figure-html/top-pattern-attributes-1.png&#34; width=&#34;672&#34; /&gt;
&lt;p&gt;Another thing that makes patterns easy to follow is if they are downloadable (as opposed to linked to another web page). Lets &lt;code&gt;filter()&lt;/code&gt; for that, and have a difficulty at least above 4.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;filter(
  project_rating_patterns, downloadable == TRUE,
  difficulty_average &amp;gt;= 4
) %&amp;gt;%
  arrange(-rating_average)
...
#&amp;gt;   comments_count                created_at currency difficulty_average
#&amp;gt; 1              8 2010/10/25 09:23:15 -0400      USD           4.252446
#&amp;gt; 2             27 2007/01/12 00:51:53 -0500      USD           4.903895
#&amp;gt; 3            131 2010/02/11 12:07:46 -0500                    4.434030
#&amp;gt; 4             22 2007/09/07 11:54:33 -0400                    4.520376
#&amp;gt;   difficulty_count downloadable favorites_count  free gauge gauge_divisor
#&amp;gt; 1              511         TRUE            4027 FALSE    32             4
#&amp;gt; 2             2362         TRUE           11155  TRUE     8             1
...
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;fetch-images&#34;&gt;Fetch images&lt;/h2&gt;
&lt;p&gt;Now that we only have four left, lets fetch the images!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;photo_links &amp;lt;- filter(
  project_rating_patterns, downloadable == TRUE,
  difficulty_average &amp;gt;= 4
) %&amp;gt;%
  unnest(cols = photos, names_sep = &amp;quot;_&amp;quot;) %&amp;gt;%
  filter(photos_sort_order == 4) %&amp;gt;%
  select(id, name, photos_medium_url)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, we will use &lt;a href=&#34;https://github.com/dahtah/imager&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;{imager}&lt;/code&gt;&lt;/a&gt; to fetch the data and plot it.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(imager)
photo_links$name
#&amp;gt; [1] &amp;quot;Pointelle&amp;quot;   &amp;quot;Firestarter&amp;quot; &amp;quot;Pomatomus&amp;quot;   &amp;quot;Skew&amp;quot;

map(photo_links$photos_medium_url, load.image) %&amp;gt;%
  map(plot, axes = FALSE)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://lizroten.com/post/finding-the-perfect-sock-pattern-with-ravelry/index_files/figure-html/images-1.png&#34; width=&#34;672&#34; /&gt;&lt;img src=&#34;https://lizroten.com/post/finding-the-perfect-sock-pattern-with-ravelry/index_files/figure-html/images-2.png&#34; width=&#34;672&#34; /&gt;&lt;img src=&#34;https://lizroten.com/post/finding-the-perfect-sock-pattern-with-ravelry/index_files/figure-html/images-3.png&#34; width=&#34;672&#34; /&gt;&lt;img src=&#34;https://lizroten.com/post/finding-the-perfect-sock-pattern-with-ravelry/index_files/figure-html/images-4.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#&amp;gt; [[1]]
#&amp;gt; Image. Width: 425 pix Height: 500 pix Depth: 1 Colour channels: 3 
#&amp;gt; 
#&amp;gt; [[2]]
#&amp;gt; Image. Width: 500 pix Height: 381 pix Depth: 1 Colour channels: 3 
#&amp;gt; 
#&amp;gt; [[3]]
#&amp;gt; Image. Width: 500 pix Height: 500 pix Depth: 1 Colour channels: 3 
#&amp;gt; 
#&amp;gt; [[4]]
#&amp;gt; Image. Width: 348 pix Height: 500 pix Depth: 1 Colour channels: 3
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;and-the-winner-is&#34;&gt;And the winner is&amp;hellip;.&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.ravelry.com/patterns/library/pomatomus&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Pomatomus&lt;/a&gt;! I mean, look at those gorgeous waves!&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://images4-f.ravelrycache.com/uploads/GoldenIris/304984815/webp/DSC_0135_medium2.webp#jpg&#34; alt=&#34;Pomatomus socks from the front&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;I have a lovely merino/nylon blend by &lt;a href=&#34;https://www.instagram.com/sunvalleyfibers/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Sun Valley Fibers&lt;/a&gt; waiting for me. I hope you enjoyed this little journey!&lt;/p&gt;
&lt;h2 id=&#34;credits&#34;&gt;Credits&lt;/h2&gt;
&lt;p&gt;I followed along &lt;a href=&#34;https://github.com/walkerkq/ravelRy/blob/master/man/example_files/example_eda.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;this example&lt;/a&gt; by the ravelRy package author, &lt;a href=&#34;https://www.kaylinpavlik.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kaylin Pavlik&lt;/a&gt;. I used colors from &lt;a href=&#34;https://edwinth.github.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Edwin Thoen&lt;/a&gt;&amp;rsquo;s R package,  &lt;a href=&#34;https://github.com/EdwinTh/dutchmasters&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;dutchmasters&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
